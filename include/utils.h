//
//  utils.h
//  engine
//
//  Created by Gabriele Carrettoni on 27/09/15.
//
//

#ifndef utils_h
#define utils_h

#include <type_traits>

namespace glmath { namespace utils {
    
#define SWIZZLExxxx() template <typename T = Vector<4>> Vector<4> xxxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),x(),x()}); return v;} SWIZZLExxxy()
#define SWIZZLExxxy() template <typename T = Vector<4>> Vector<4> xxxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),x(),y()}); return v;} SWIZZLExxxz()
#define SWIZZLExxxz() template <typename T = Vector<4>> Vector<4> xxxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),x(),z()}); return v;} SWIZZLExxxw()
#define SWIZZLExxxw() template <typename T = Vector<4>> Vector<4> xxxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),x(),w()}); return v;} SWIZZLExxyx()
#define SWIZZLExxyx() template <typename T = Vector<4>> Vector<4> xxyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),y(),x()}); return v;} SWIZZLExxyy()
#define SWIZZLExxyy() template <typename T = Vector<4>> Vector<4> xxyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),y(),y()}); return v;} SWIZZLExxyz()
#define SWIZZLExxyz() template <typename T = Vector<4>> Vector<4> xxyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),y(),z()}); return v;} SWIZZLExxyw()
#define SWIZZLExxyw() template <typename T = Vector<4>> Vector<4> xxyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),y(),w()}); return v;} SWIZZLExxzx()
#define SWIZZLExxzx() template <typename T = Vector<4>> Vector<4> xxzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),z(),x()}); return v;} SWIZZLExxzy()
#define SWIZZLExxzy() template <typename T = Vector<4>> Vector<4> xxzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),z(),y()}); return v;} SWIZZLExxzz()
#define SWIZZLExxzz() template <typename T = Vector<4>> Vector<4> xxzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),z(),z()}); return v;} SWIZZLExxzw()
#define SWIZZLExxzw() template <typename T = Vector<4>> Vector<4> xxzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),z(),w()}); return v;} SWIZZLExxwx()
#define SWIZZLExxwx() template <typename T = Vector<4>> Vector<4> xxwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),w(),x()}); return v;} SWIZZLExxwy()
#define SWIZZLExxwy() template <typename T = Vector<4>> Vector<4> xxwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),w(),y()}); return v;} SWIZZLExxwz()
#define SWIZZLExxwz() template <typename T = Vector<4>> Vector<4> xxwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),w(),z()}); return v;} SWIZZLExxww()
#define SWIZZLExxww() template <typename T = Vector<4>> Vector<4> xxww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),x(),w(),w()}); return v;} SWIZZLExyxx()
#define SWIZZLExyxx() template <typename T = Vector<4>> Vector<4> xyxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),x(),x()}); return v;} SWIZZLExyxy()
#define SWIZZLExyxy() template <typename T = Vector<4>> Vector<4> xyxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),x(),y()}); return v;} SWIZZLExyxz()
#define SWIZZLExyxz() template <typename T = Vector<4>> Vector<4> xyxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),x(),z()}); return v;} SWIZZLExyxw()
#define SWIZZLExyxw() template <typename T = Vector<4>> Vector<4> xyxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),x(),w()}); return v;} SWIZZLExyyx()
#define SWIZZLExyyx() template <typename T = Vector<4>> Vector<4> xyyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),y(),x()}); return v;} SWIZZLExyyy()
#define SWIZZLExyyy() template <typename T = Vector<4>> Vector<4> xyyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),y(),y()}); return v;} SWIZZLExyyz()
#define SWIZZLExyyz() template <typename T = Vector<4>> Vector<4> xyyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),y(),z()}); return v;} SWIZZLExyyw()
#define SWIZZLExyyw() template <typename T = Vector<4>> Vector<4> xyyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),y(),w()}); return v;} SWIZZLExyzx()
#define SWIZZLExyzx() template <typename T = Vector<4>> Vector<4> xyzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),z(),x()}); return v;} SWIZZLExyzy()
#define SWIZZLExyzy() template <typename T = Vector<4>> Vector<4> xyzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),z(),y()}); return v;} SWIZZLExyzz()
#define SWIZZLExyzz() template <typename T = Vector<4>> Vector<4> xyzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),z(),z()}); return v;} SWIZZLExyzw()
#define SWIZZLExyzw() template <typename T = Vector<4>> Vector<4> xyzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),z(),w()}); return v;} SWIZZLExywx()
#define SWIZZLExywx() template <typename T = Vector<4>> Vector<4> xywx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),w(),x()}); return v;} SWIZZLExywy()
#define SWIZZLExywy() template <typename T = Vector<4>> Vector<4> xywy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),w(),y()}); return v;} SWIZZLExywz()
#define SWIZZLExywz() template <typename T = Vector<4>> Vector<4> xywz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),w(),z()}); return v;} SWIZZLExyww()
#define SWIZZLExyww() template <typename T = Vector<4>> Vector<4> xyww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),y(),w(),w()}); return v;} SWIZZLExzxx()
#define SWIZZLExzxx() template <typename T = Vector<4>> Vector<4> xzxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),x(),x()}); return v;} SWIZZLExzxy()
#define SWIZZLExzxy() template <typename T = Vector<4>> Vector<4> xzxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),x(),y()}); return v;} SWIZZLExzxz()
#define SWIZZLExzxz() template <typename T = Vector<4>> Vector<4> xzxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),x(),z()}); return v;} SWIZZLExzxw()
#define SWIZZLExzxw() template <typename T = Vector<4>> Vector<4> xzxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),x(),w()}); return v;} SWIZZLExzyx()
#define SWIZZLExzyx() template <typename T = Vector<4>> Vector<4> xzyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),y(),x()}); return v;} SWIZZLExzyy()
#define SWIZZLExzyy() template <typename T = Vector<4>> Vector<4> xzyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),y(),y()}); return v;} SWIZZLExzyz()
#define SWIZZLExzyz() template <typename T = Vector<4>> Vector<4> xzyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),y(),z()}); return v;} SWIZZLExzyw()
#define SWIZZLExzyw() template <typename T = Vector<4>> Vector<4> xzyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),y(),w()}); return v;} SWIZZLExzzx()
#define SWIZZLExzzx() template <typename T = Vector<4>> Vector<4> xzzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),z(),x()}); return v;} SWIZZLExzzy()
#define SWIZZLExzzy() template <typename T = Vector<4>> Vector<4> xzzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),z(),y()}); return v;} SWIZZLExzzz()
#define SWIZZLExzzz() template <typename T = Vector<4>> Vector<4> xzzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),z(),z()}); return v;} SWIZZLExzzw()
#define SWIZZLExzzw() template <typename T = Vector<4>> Vector<4> xzzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),z(),w()}); return v;} SWIZZLExzwx()
#define SWIZZLExzwx() template <typename T = Vector<4>> Vector<4> xzwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),w(),x()}); return v;} SWIZZLExzwy()
#define SWIZZLExzwy() template <typename T = Vector<4>> Vector<4> xzwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),w(),y()}); return v;} SWIZZLExzwz()
#define SWIZZLExzwz() template <typename T = Vector<4>> Vector<4> xzwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),w(),z()}); return v;} SWIZZLExzww()
#define SWIZZLExzww() template <typename T = Vector<4>> Vector<4> xzww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),z(),w(),w()}); return v;} SWIZZLExwxx()
#define SWIZZLExwxx() template <typename T = Vector<4>> Vector<4> xwxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),x(),x()}); return v;} SWIZZLExwxy()
#define SWIZZLExwxy() template <typename T = Vector<4>> Vector<4> xwxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),x(),y()}); return v;} SWIZZLExwxz()
#define SWIZZLExwxz() template <typename T = Vector<4>> Vector<4> xwxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),x(),z()}); return v;} SWIZZLExwxw()
#define SWIZZLExwxw() template <typename T = Vector<4>> Vector<4> xwxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),x(),w()}); return v;} SWIZZLExwyx()
#define SWIZZLExwyx() template <typename T = Vector<4>> Vector<4> xwyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),y(),x()}); return v;} SWIZZLExwyy()
#define SWIZZLExwyy() template <typename T = Vector<4>> Vector<4> xwyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),y(),y()}); return v;} SWIZZLExwyz()
#define SWIZZLExwyz() template <typename T = Vector<4>> Vector<4> xwyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),y(),z()}); return v;} SWIZZLExwyw()
#define SWIZZLExwyw() template <typename T = Vector<4>> Vector<4> xwyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),y(),w()}); return v;} SWIZZLExwzx()
#define SWIZZLExwzx() template <typename T = Vector<4>> Vector<4> xwzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),z(),x()}); return v;} SWIZZLExwzy()
#define SWIZZLExwzy() template <typename T = Vector<4>> Vector<4> xwzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),z(),y()}); return v;} SWIZZLExwzz()
#define SWIZZLExwzz() template <typename T = Vector<4>> Vector<4> xwzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),z(),z()}); return v;} SWIZZLExwzw()
#define SWIZZLExwzw() template <typename T = Vector<4>> Vector<4> xwzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),z(),w()}); return v;} SWIZZLExwwx()
#define SWIZZLExwwx() template <typename T = Vector<4>> Vector<4> xwwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),w(),x()}); return v;} SWIZZLExwwy()
#define SWIZZLExwwy() template <typename T = Vector<4>> Vector<4> xwwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),w(),y()}); return v;} SWIZZLExwwz()
#define SWIZZLExwwz() template <typename T = Vector<4>> Vector<4> xwwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),w(),z()}); return v;} SWIZZLExwww()
#define SWIZZLExwww() template <typename T = Vector<4>> Vector<4> xwww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({x(),w(),w(),w()}); return v;} SWIZZLEyxxx()
#define SWIZZLEyxxx() template <typename T = Vector<4>> Vector<4> yxxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),x(),x()}); return v;} SWIZZLEyxxy()
#define SWIZZLEyxxy() template <typename T = Vector<4>> Vector<4> yxxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),x(),y()}); return v;} SWIZZLEyxxz()
#define SWIZZLEyxxz() template <typename T = Vector<4>> Vector<4> yxxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),x(),z()}); return v;} SWIZZLEyxxw()
#define SWIZZLEyxxw() template <typename T = Vector<4>> Vector<4> yxxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),x(),w()}); return v;} SWIZZLEyxyx()
#define SWIZZLEyxyx() template <typename T = Vector<4>> Vector<4> yxyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),y(),x()}); return v;} SWIZZLEyxyy()
#define SWIZZLEyxyy() template <typename T = Vector<4>> Vector<4> yxyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),y(),y()}); return v;} SWIZZLEyxyz()
#define SWIZZLEyxyz() template <typename T = Vector<4>> Vector<4> yxyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),y(),z()}); return v;} SWIZZLEyxyw()
#define SWIZZLEyxyw() template <typename T = Vector<4>> Vector<4> yxyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),y(),w()}); return v;} SWIZZLEyxzx()
#define SWIZZLEyxzx() template <typename T = Vector<4>> Vector<4> yxzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),z(),x()}); return v;} SWIZZLEyxzy()
#define SWIZZLEyxzy() template <typename T = Vector<4>> Vector<4> yxzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),z(),y()}); return v;} SWIZZLEyxzz()
#define SWIZZLEyxzz() template <typename T = Vector<4>> Vector<4> yxzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),z(),z()}); return v;} SWIZZLEyxzw()
#define SWIZZLEyxzw() template <typename T = Vector<4>> Vector<4> yxzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),z(),w()}); return v;} SWIZZLEyxwx()
#define SWIZZLEyxwx() template <typename T = Vector<4>> Vector<4> yxwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),w(),x()}); return v;} SWIZZLEyxwy()
#define SWIZZLEyxwy() template <typename T = Vector<4>> Vector<4> yxwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),w(),y()}); return v;} SWIZZLEyxwz()
#define SWIZZLEyxwz() template <typename T = Vector<4>> Vector<4> yxwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),w(),z()}); return v;} SWIZZLEyxww()
#define SWIZZLEyxww() template <typename T = Vector<4>> Vector<4> yxww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),x(),w(),w()}); return v;} SWIZZLEyyxx()
#define SWIZZLEyyxx() template <typename T = Vector<4>> Vector<4> yyxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),x(),x()}); return v;} SWIZZLEyyxy()
#define SWIZZLEyyxy() template <typename T = Vector<4>> Vector<4> yyxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),x(),y()}); return v;} SWIZZLEyyxz()
#define SWIZZLEyyxz() template <typename T = Vector<4>> Vector<4> yyxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),x(),z()}); return v;} SWIZZLEyyxw()
#define SWIZZLEyyxw() template <typename T = Vector<4>> Vector<4> yyxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),x(),w()}); return v;} SWIZZLEyyyx()
#define SWIZZLEyyyx() template <typename T = Vector<4>> Vector<4> yyyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),y(),x()}); return v;} SWIZZLEyyyy()
#define SWIZZLEyyyy() template <typename T = Vector<4>> Vector<4> yyyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),y(),y()}); return v;} SWIZZLEyyyz()
#define SWIZZLEyyyz() template <typename T = Vector<4>> Vector<4> yyyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),y(),z()}); return v;} SWIZZLEyyyw()
#define SWIZZLEyyyw() template <typename T = Vector<4>> Vector<4> yyyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),y(),w()}); return v;} SWIZZLEyyzx()
#define SWIZZLEyyzx() template <typename T = Vector<4>> Vector<4> yyzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),z(),x()}); return v;} SWIZZLEyyzy()
#define SWIZZLEyyzy() template <typename T = Vector<4>> Vector<4> yyzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),z(),y()}); return v;} SWIZZLEyyzz()
#define SWIZZLEyyzz() template <typename T = Vector<4>> Vector<4> yyzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),z(),z()}); return v;} SWIZZLEyyzw()
#define SWIZZLEyyzw() template <typename T = Vector<4>> Vector<4> yyzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),z(),w()}); return v;} SWIZZLEyywx()
#define SWIZZLEyywx() template <typename T = Vector<4>> Vector<4> yywx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),w(),x()}); return v;} SWIZZLEyywy()
#define SWIZZLEyywy() template <typename T = Vector<4>> Vector<4> yywy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),w(),y()}); return v;} SWIZZLEyywz()
#define SWIZZLEyywz() template <typename T = Vector<4>> Vector<4> yywz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),w(),z()}); return v;} SWIZZLEyyww()
#define SWIZZLEyyww() template <typename T = Vector<4>> Vector<4> yyww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),y(),w(),w()}); return v;} SWIZZLEyzxx()
#define SWIZZLEyzxx() template <typename T = Vector<4>> Vector<4> yzxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),x(),x()}); return v;} SWIZZLEyzxy()
#define SWIZZLEyzxy() template <typename T = Vector<4>> Vector<4> yzxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),x(),y()}); return v;} SWIZZLEyzxz()
#define SWIZZLEyzxz() template <typename T = Vector<4>> Vector<4> yzxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),x(),z()}); return v;} SWIZZLEyzxw()
#define SWIZZLEyzxw() template <typename T = Vector<4>> Vector<4> yzxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),x(),w()}); return v;} SWIZZLEyzyx()
#define SWIZZLEyzyx() template <typename T = Vector<4>> Vector<4> yzyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),y(),x()}); return v;} SWIZZLEyzyy()
#define SWIZZLEyzyy() template <typename T = Vector<4>> Vector<4> yzyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),y(),y()}); return v;} SWIZZLEyzyz()
#define SWIZZLEyzyz() template <typename T = Vector<4>> Vector<4> yzyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),y(),z()}); return v;} SWIZZLEyzyw()
#define SWIZZLEyzyw() template <typename T = Vector<4>> Vector<4> yzyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),y(),w()}); return v;} SWIZZLEyzzx()
#define SWIZZLEyzzx() template <typename T = Vector<4>> Vector<4> yzzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),z(),x()}); return v;} SWIZZLEyzzy()
#define SWIZZLEyzzy() template <typename T = Vector<4>> Vector<4> yzzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),z(),y()}); return v;} SWIZZLEyzzz()
#define SWIZZLEyzzz() template <typename T = Vector<4>> Vector<4> yzzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),z(),z()}); return v;} SWIZZLEyzzw()
#define SWIZZLEyzzw() template <typename T = Vector<4>> Vector<4> yzzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),z(),w()}); return v;} SWIZZLEyzwx()
#define SWIZZLEyzwx() template <typename T = Vector<4>> Vector<4> yzwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),w(),x()}); return v;} SWIZZLEyzwy()
#define SWIZZLEyzwy() template <typename T = Vector<4>> Vector<4> yzwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),w(),y()}); return v;} SWIZZLEyzwz()
#define SWIZZLEyzwz() template <typename T = Vector<4>> Vector<4> yzwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),w(),z()}); return v;} SWIZZLEyzww()
#define SWIZZLEyzww() template <typename T = Vector<4>> Vector<4> yzww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),z(),w(),w()}); return v;} SWIZZLEywxx()
#define SWIZZLEywxx() template <typename T = Vector<4>> Vector<4> ywxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),x(),x()}); return v;} SWIZZLEywxy()
#define SWIZZLEywxy() template <typename T = Vector<4>> Vector<4> ywxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),x(),y()}); return v;} SWIZZLEywxz()
#define SWIZZLEywxz() template <typename T = Vector<4>> Vector<4> ywxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),x(),z()}); return v;} SWIZZLEywxw()
#define SWIZZLEywxw() template <typename T = Vector<4>> Vector<4> ywxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),x(),w()}); return v;} SWIZZLEywyx()
#define SWIZZLEywyx() template <typename T = Vector<4>> Vector<4> ywyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),y(),x()}); return v;} SWIZZLEywyy()
#define SWIZZLEywyy() template <typename T = Vector<4>> Vector<4> ywyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),y(),y()}); return v;} SWIZZLEywyz()
#define SWIZZLEywyz() template <typename T = Vector<4>> Vector<4> ywyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),y(),z()}); return v;} SWIZZLEywyw()
#define SWIZZLEywyw() template <typename T = Vector<4>> Vector<4> ywyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),y(),w()}); return v;} SWIZZLEywzx()
#define SWIZZLEywzx() template <typename T = Vector<4>> Vector<4> ywzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),z(),x()}); return v;} SWIZZLEywzy()
#define SWIZZLEywzy() template <typename T = Vector<4>> Vector<4> ywzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),z(),y()}); return v;} SWIZZLEywzz()
#define SWIZZLEywzz() template <typename T = Vector<4>> Vector<4> ywzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),z(),z()}); return v;} SWIZZLEywzw()
#define SWIZZLEywzw() template <typename T = Vector<4>> Vector<4> ywzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),z(),w()}); return v;} SWIZZLEywwx()
#define SWIZZLEywwx() template <typename T = Vector<4>> Vector<4> ywwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),w(),x()}); return v;} SWIZZLEywwy()
#define SWIZZLEywwy() template <typename T = Vector<4>> Vector<4> ywwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),w(),y()}); return v;} SWIZZLEywwz()
#define SWIZZLEywwz() template <typename T = Vector<4>> Vector<4> ywwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),w(),z()}); return v;} SWIZZLEywww()
#define SWIZZLEywww() template <typename T = Vector<4>> Vector<4> ywww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({y(),w(),w(),w()}); return v;} SWIZZLEzxxx()
#define SWIZZLEzxxx() template <typename T = Vector<4>> Vector<4> zxxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),x(),x()}); return v;} SWIZZLEzxxy()
#define SWIZZLEzxxy() template <typename T = Vector<4>> Vector<4> zxxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),x(),y()}); return v;} SWIZZLEzxxz()
#define SWIZZLEzxxz() template <typename T = Vector<4>> Vector<4> zxxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),x(),z()}); return v;} SWIZZLEzxxw()
#define SWIZZLEzxxw() template <typename T = Vector<4>> Vector<4> zxxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),x(),w()}); return v;} SWIZZLEzxyx()
#define SWIZZLEzxyx() template <typename T = Vector<4>> Vector<4> zxyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),y(),x()}); return v;} SWIZZLEzxyy()
#define SWIZZLEzxyy() template <typename T = Vector<4>> Vector<4> zxyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),y(),y()}); return v;} SWIZZLEzxyz()
#define SWIZZLEzxyz() template <typename T = Vector<4>> Vector<4> zxyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),y(),z()}); return v;} SWIZZLEzxyw()
#define SWIZZLEzxyw() template <typename T = Vector<4>> Vector<4> zxyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),y(),w()}); return v;} SWIZZLEzxzx()
#define SWIZZLEzxzx() template <typename T = Vector<4>> Vector<4> zxzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),z(),x()}); return v;} SWIZZLEzxzy()
#define SWIZZLEzxzy() template <typename T = Vector<4>> Vector<4> zxzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),z(),y()}); return v;} SWIZZLEzxzz()
#define SWIZZLEzxzz() template <typename T = Vector<4>> Vector<4> zxzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),z(),z()}); return v;} SWIZZLEzxzw()
#define SWIZZLEzxzw() template <typename T = Vector<4>> Vector<4> zxzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),z(),w()}); return v;} SWIZZLEzxwx()
#define SWIZZLEzxwx() template <typename T = Vector<4>> Vector<4> zxwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),w(),x()}); return v;} SWIZZLEzxwy()
#define SWIZZLEzxwy() template <typename T = Vector<4>> Vector<4> zxwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),w(),y()}); return v;} SWIZZLEzxwz()
#define SWIZZLEzxwz() template <typename T = Vector<4>> Vector<4> zxwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),w(),z()}); return v;} SWIZZLEzxww()
#define SWIZZLEzxww() template <typename T = Vector<4>> Vector<4> zxww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),x(),w(),w()}); return v;} SWIZZLEzyxx()
#define SWIZZLEzyxx() template <typename T = Vector<4>> Vector<4> zyxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),x(),x()}); return v;} SWIZZLEzyxy()
#define SWIZZLEzyxy() template <typename T = Vector<4>> Vector<4> zyxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),x(),y()}); return v;} SWIZZLEzyxz()
#define SWIZZLEzyxz() template <typename T = Vector<4>> Vector<4> zyxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),x(),z()}); return v;} SWIZZLEzyxw()
#define SWIZZLEzyxw() template <typename T = Vector<4>> Vector<4> zyxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),x(),w()}); return v;} SWIZZLEzyyx()
#define SWIZZLEzyyx() template <typename T = Vector<4>> Vector<4> zyyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),y(),x()}); return v;} SWIZZLEzyyy()
#define SWIZZLEzyyy() template <typename T = Vector<4>> Vector<4> zyyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),y(),y()}); return v;} SWIZZLEzyyz()
#define SWIZZLEzyyz() template <typename T = Vector<4>> Vector<4> zyyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),y(),z()}); return v;} SWIZZLEzyyw()
#define SWIZZLEzyyw() template <typename T = Vector<4>> Vector<4> zyyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),y(),w()}); return v;} SWIZZLEzyzx()
#define SWIZZLEzyzx() template <typename T = Vector<4>> Vector<4> zyzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),z(),x()}); return v;} SWIZZLEzyzy()
#define SWIZZLEzyzy() template <typename T = Vector<4>> Vector<4> zyzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),z(),y()}); return v;} SWIZZLEzyzz()
#define SWIZZLEzyzz() template <typename T = Vector<4>> Vector<4> zyzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),z(),z()}); return v;} SWIZZLEzyzw()
#define SWIZZLEzyzw() template <typename T = Vector<4>> Vector<4> zyzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),z(),w()}); return v;} SWIZZLEzywx()
#define SWIZZLEzywx() template <typename T = Vector<4>> Vector<4> zywx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),w(),x()}); return v;} SWIZZLEzywy()
#define SWIZZLEzywy() template <typename T = Vector<4>> Vector<4> zywy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),w(),y()}); return v;} SWIZZLEzywz()
#define SWIZZLEzywz() template <typename T = Vector<4>> Vector<4> zywz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),w(),z()}); return v;} SWIZZLEzyww()
#define SWIZZLEzyww() template <typename T = Vector<4>> Vector<4> zyww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),y(),w(),w()}); return v;} SWIZZLEzzxx()
#define SWIZZLEzzxx() template <typename T = Vector<4>> Vector<4> zzxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),x(),x()}); return v;} SWIZZLEzzxy()
#define SWIZZLEzzxy() template <typename T = Vector<4>> Vector<4> zzxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),x(),y()}); return v;} SWIZZLEzzxz()
#define SWIZZLEzzxz() template <typename T = Vector<4>> Vector<4> zzxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),x(),z()}); return v;} SWIZZLEzzxw()
#define SWIZZLEzzxw() template <typename T = Vector<4>> Vector<4> zzxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),x(),w()}); return v;} SWIZZLEzzyx()
#define SWIZZLEzzyx() template <typename T = Vector<4>> Vector<4> zzyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),y(),x()}); return v;} SWIZZLEzzyy()
#define SWIZZLEzzyy() template <typename T = Vector<4>> Vector<4> zzyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),y(),y()}); return v;} SWIZZLEzzyz()
#define SWIZZLEzzyz() template <typename T = Vector<4>> Vector<4> zzyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),y(),z()}); return v;} SWIZZLEzzyw()
#define SWIZZLEzzyw() template <typename T = Vector<4>> Vector<4> zzyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),y(),w()}); return v;} SWIZZLEzzzx()
#define SWIZZLEzzzx() template <typename T = Vector<4>> Vector<4> zzzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),z(),x()}); return v;} SWIZZLEzzzy()
#define SWIZZLEzzzy() template <typename T = Vector<4>> Vector<4> zzzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),z(),y()}); return v;} SWIZZLEzzzz()
#define SWIZZLEzzzz() template <typename T = Vector<4>> Vector<4> zzzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),z(),z()}); return v;} SWIZZLEzzzw()
#define SWIZZLEzzzw() template <typename T = Vector<4>> Vector<4> zzzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),z(),w()}); return v;} SWIZZLEzzwx()
#define SWIZZLEzzwx() template <typename T = Vector<4>> Vector<4> zzwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),w(),x()}); return v;} SWIZZLEzzwy()
#define SWIZZLEzzwy() template <typename T = Vector<4>> Vector<4> zzwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),w(),y()}); return v;} SWIZZLEzzwz()
#define SWIZZLEzzwz() template <typename T = Vector<4>> Vector<4> zzwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),w(),z()}); return v;} SWIZZLEzzww()
#define SWIZZLEzzww() template <typename T = Vector<4>> Vector<4> zzww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),z(),w(),w()}); return v;} SWIZZLEzwxx()
#define SWIZZLEzwxx() template <typename T = Vector<4>> Vector<4> zwxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),x(),x()}); return v;} SWIZZLEzwxy()
#define SWIZZLEzwxy() template <typename T = Vector<4>> Vector<4> zwxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),x(),y()}); return v;} SWIZZLEzwxz()
#define SWIZZLEzwxz() template <typename T = Vector<4>> Vector<4> zwxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),x(),z()}); return v;} SWIZZLEzwxw()
#define SWIZZLEzwxw() template <typename T = Vector<4>> Vector<4> zwxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),x(),w()}); return v;} SWIZZLEzwyx()
#define SWIZZLEzwyx() template <typename T = Vector<4>> Vector<4> zwyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),y(),x()}); return v;} SWIZZLEzwyy()
#define SWIZZLEzwyy() template <typename T = Vector<4>> Vector<4> zwyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),y(),y()}); return v;} SWIZZLEzwyz()
#define SWIZZLEzwyz() template <typename T = Vector<4>> Vector<4> zwyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),y(),z()}); return v;} SWIZZLEzwyw()
#define SWIZZLEzwyw() template <typename T = Vector<4>> Vector<4> zwyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),y(),w()}); return v;} SWIZZLEzwzx()
#define SWIZZLEzwzx() template <typename T = Vector<4>> Vector<4> zwzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),z(),x()}); return v;} SWIZZLEzwzy()
#define SWIZZLEzwzy() template <typename T = Vector<4>> Vector<4> zwzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),z(),y()}); return v;} SWIZZLEzwzz()
#define SWIZZLEzwzz() template <typename T = Vector<4>> Vector<4> zwzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),z(),z()}); return v;} SWIZZLEzwzw()
#define SWIZZLEzwzw() template <typename T = Vector<4>> Vector<4> zwzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),z(),w()}); return v;} SWIZZLEzwwx()
#define SWIZZLEzwwx() template <typename T = Vector<4>> Vector<4> zwwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),w(),x()}); return v;} SWIZZLEzwwy()
#define SWIZZLEzwwy() template <typename T = Vector<4>> Vector<4> zwwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),w(),y()}); return v;} SWIZZLEzwwz()
#define SWIZZLEzwwz() template <typename T = Vector<4>> Vector<4> zwwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),w(),z()}); return v;} SWIZZLEzwww()
#define SWIZZLEzwww() template <typename T = Vector<4>> Vector<4> zwww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({z(),w(),w(),w()}); return v;} SWIZZLEwxxx()
#define SWIZZLEwxxx() template <typename T = Vector<4>> Vector<4> wxxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),x(),x()}); return v;} SWIZZLEwxxy()
#define SWIZZLEwxxy() template <typename T = Vector<4>> Vector<4> wxxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),x(),y()}); return v;} SWIZZLEwxxz()
#define SWIZZLEwxxz() template <typename T = Vector<4>> Vector<4> wxxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),x(),z()}); return v;} SWIZZLEwxxw()
#define SWIZZLEwxxw() template <typename T = Vector<4>> Vector<4> wxxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),x(),w()}); return v;} SWIZZLEwxyx()
#define SWIZZLEwxyx() template <typename T = Vector<4>> Vector<4> wxyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),y(),x()}); return v;} SWIZZLEwxyy()
#define SWIZZLEwxyy() template <typename T = Vector<4>> Vector<4> wxyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),y(),y()}); return v;} SWIZZLEwxyz()
#define SWIZZLEwxyz() template <typename T = Vector<4>> Vector<4> wxyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),y(),z()}); return v;} SWIZZLEwxyw()
#define SWIZZLEwxyw() template <typename T = Vector<4>> Vector<4> wxyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),y(),w()}); return v;} SWIZZLEwxzx()
#define SWIZZLEwxzx() template <typename T = Vector<4>> Vector<4> wxzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),z(),x()}); return v;} SWIZZLEwxzy()
#define SWIZZLEwxzy() template <typename T = Vector<4>> Vector<4> wxzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),z(),y()}); return v;} SWIZZLEwxzz()
#define SWIZZLEwxzz() template <typename T = Vector<4>> Vector<4> wxzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),z(),z()}); return v;} SWIZZLEwxzw()
#define SWIZZLEwxzw() template <typename T = Vector<4>> Vector<4> wxzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),z(),w()}); return v;} SWIZZLEwxwx()
#define SWIZZLEwxwx() template <typename T = Vector<4>> Vector<4> wxwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),w(),x()}); return v;} SWIZZLEwxwy()
#define SWIZZLEwxwy() template <typename T = Vector<4>> Vector<4> wxwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),w(),y()}); return v;} SWIZZLEwxwz()
#define SWIZZLEwxwz() template <typename T = Vector<4>> Vector<4> wxwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),w(),z()}); return v;} SWIZZLEwxww()
#define SWIZZLEwxww() template <typename T = Vector<4>> Vector<4> wxww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),x(),w(),w()}); return v;} SWIZZLEwyxx()
#define SWIZZLEwyxx() template <typename T = Vector<4>> Vector<4> wyxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),x(),x()}); return v;} SWIZZLEwyxy()
#define SWIZZLEwyxy() template <typename T = Vector<4>> Vector<4> wyxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),x(),y()}); return v;} SWIZZLEwyxz()
#define SWIZZLEwyxz() template <typename T = Vector<4>> Vector<4> wyxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),x(),z()}); return v;} SWIZZLEwyxw()
#define SWIZZLEwyxw() template <typename T = Vector<4>> Vector<4> wyxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),x(),w()}); return v;} SWIZZLEwyyx()
#define SWIZZLEwyyx() template <typename T = Vector<4>> Vector<4> wyyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),y(),x()}); return v;} SWIZZLEwyyy()
#define SWIZZLEwyyy() template <typename T = Vector<4>> Vector<4> wyyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),y(),y()}); return v;} SWIZZLEwyyz()
#define SWIZZLEwyyz() template <typename T = Vector<4>> Vector<4> wyyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),y(),z()}); return v;} SWIZZLEwyyw()
#define SWIZZLEwyyw() template <typename T = Vector<4>> Vector<4> wyyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),y(),w()}); return v;} SWIZZLEwyzx()
#define SWIZZLEwyzx() template <typename T = Vector<4>> Vector<4> wyzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),z(),x()}); return v;} SWIZZLEwyzy()
#define SWIZZLEwyzy() template <typename T = Vector<4>> Vector<4> wyzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),z(),y()}); return v;} SWIZZLEwyzz()
#define SWIZZLEwyzz() template <typename T = Vector<4>> Vector<4> wyzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),z(),z()}); return v;} SWIZZLEwyzw()
#define SWIZZLEwyzw() template <typename T = Vector<4>> Vector<4> wyzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),z(),w()}); return v;} SWIZZLEwywx()
#define SWIZZLEwywx() template <typename T = Vector<4>> Vector<4> wywx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),w(),x()}); return v;} SWIZZLEwywy()
#define SWIZZLEwywy() template <typename T = Vector<4>> Vector<4> wywy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),w(),y()}); return v;} SWIZZLEwywz()
#define SWIZZLEwywz() template <typename T = Vector<4>> Vector<4> wywz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),w(),z()}); return v;} SWIZZLEwyww()
#define SWIZZLEwyww() template <typename T = Vector<4>> Vector<4> wyww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),y(),w(),w()}); return v;} SWIZZLEwzxx()
#define SWIZZLEwzxx() template <typename T = Vector<4>> Vector<4> wzxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),x(),x()}); return v;} SWIZZLEwzxy()
#define SWIZZLEwzxy() template <typename T = Vector<4>> Vector<4> wzxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),x(),y()}); return v;} SWIZZLEwzxz()
#define SWIZZLEwzxz() template <typename T = Vector<4>> Vector<4> wzxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),x(),z()}); return v;} SWIZZLEwzxw()
#define SWIZZLEwzxw() template <typename T = Vector<4>> Vector<4> wzxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),x(),w()}); return v;} SWIZZLEwzyx()
#define SWIZZLEwzyx() template <typename T = Vector<4>> Vector<4> wzyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),y(),x()}); return v;} SWIZZLEwzyy()
#define SWIZZLEwzyy() template <typename T = Vector<4>> Vector<4> wzyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),y(),y()}); return v;} SWIZZLEwzyz()
#define SWIZZLEwzyz() template <typename T = Vector<4>> Vector<4> wzyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),y(),z()}); return v;} SWIZZLEwzyw()
#define SWIZZLEwzyw() template <typename T = Vector<4>> Vector<4> wzyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),y(),w()}); return v;} SWIZZLEwzzx()
#define SWIZZLEwzzx() template <typename T = Vector<4>> Vector<4> wzzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),z(),x()}); return v;} SWIZZLEwzzy()
#define SWIZZLEwzzy() template <typename T = Vector<4>> Vector<4> wzzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),z(),y()}); return v;} SWIZZLEwzzz()
#define SWIZZLEwzzz() template <typename T = Vector<4>> Vector<4> wzzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),z(),z()}); return v;} SWIZZLEwzzw()
#define SWIZZLEwzzw() template <typename T = Vector<4>> Vector<4> wzzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),z(),w()}); return v;} SWIZZLEwzwx()
#define SWIZZLEwzwx() template <typename T = Vector<4>> Vector<4> wzwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),w(),x()}); return v;} SWIZZLEwzwy()
#define SWIZZLEwzwy() template <typename T = Vector<4>> Vector<4> wzwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),w(),y()}); return v;} SWIZZLEwzwz()
#define SWIZZLEwzwz() template <typename T = Vector<4>> Vector<4> wzwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),w(),z()}); return v;} SWIZZLEwzww()
#define SWIZZLEwzww() template <typename T = Vector<4>> Vector<4> wzww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),z(),w(),w()}); return v;} SWIZZLEwwxx()
#define SWIZZLEwwxx() template <typename T = Vector<4>> Vector<4> wwxx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),x(),x()}); return v;} SWIZZLEwwxy()
#define SWIZZLEwwxy() template <typename T = Vector<4>> Vector<4> wwxy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),x(),y()}); return v;} SWIZZLEwwxz()
#define SWIZZLEwwxz() template <typename T = Vector<4>> Vector<4> wwxz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),x(),z()}); return v;} SWIZZLEwwxw()
#define SWIZZLEwwxw() template <typename T = Vector<4>> Vector<4> wwxw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),x(),w()}); return v;} SWIZZLEwwyx()
#define SWIZZLEwwyx() template <typename T = Vector<4>> Vector<4> wwyx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),y(),x()}); return v;} SWIZZLEwwyy()
#define SWIZZLEwwyy() template <typename T = Vector<4>> Vector<4> wwyy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),y(),y()}); return v;} SWIZZLEwwyz()
#define SWIZZLEwwyz() template <typename T = Vector<4>> Vector<4> wwyz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),y(),z()}); return v;} SWIZZLEwwyw()
#define SWIZZLEwwyw() template <typename T = Vector<4>> Vector<4> wwyw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),y(),w()}); return v;} SWIZZLEwwzx()
#define SWIZZLEwwzx() template <typename T = Vector<4>> Vector<4> wwzx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),z(),x()}); return v;} SWIZZLEwwzy()
#define SWIZZLEwwzy() template <typename T = Vector<4>> Vector<4> wwzy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),z(),y()}); return v;} SWIZZLEwwzz()
#define SWIZZLEwwzz() template <typename T = Vector<4>> Vector<4> wwzz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),z(),z()}); return v;} SWIZZLEwwzw()
#define SWIZZLEwwzw() template <typename T = Vector<4>> Vector<4> wwzw(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),z(),w()}); return v;} SWIZZLEwwwx()
#define SWIZZLEwwwx() template <typename T = Vector<4>> Vector<4> wwwx(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),w(),x()}); return v;} SWIZZLEwwwy()
#define SWIZZLEwwwy() template <typename T = Vector<4>> Vector<4> wwwy(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),w(),y()}); return v;} SWIZZLEwwwz()
#define SWIZZLEwwwz() template <typename T = Vector<4>> Vector<4> wwwz(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),w(),z()}); return v;} SWIZZLEwwww()
#define SWIZZLEwwww() template <typename T = Vector<4>> Vector<4> wwww(typename std::enable_if<(N > 3), T>::type* = 0) { Vector<4> v({w(),w(),w(),w()}); return v;} SWIZZLExxx()
#define SWIZZLExxx() template <typename T = Vector<3>> Vector<3> xxx(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({x(),x(),x()}); return v;} SWIZZLExxy()
#define SWIZZLExxy() template <typename T = Vector<3>> Vector<3> xxy(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({x(),x(),y()}); return v;} SWIZZLExxz()
#define SWIZZLExxz() template <typename T = Vector<3>> Vector<3> xxz(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({x(),x(),z()}); return v;} SWIZZLExyx()
#define SWIZZLExyx() template <typename T = Vector<3>> Vector<3> xyx(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({x(),y(),x()}); return v;} SWIZZLExyy()
#define SWIZZLExyy() template <typename T = Vector<3>> Vector<3> xyy(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({x(),y(),y()}); return v;} SWIZZLExyz()
#define SWIZZLExyz() template <typename T = Vector<3>> Vector<3> xyz(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({x(),y(),z()}); return v;} SWIZZLExzx()
#define SWIZZLExzx() template <typename T = Vector<3>> Vector<3> xzx(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({x(),z(),x()}); return v;} SWIZZLExzy()
#define SWIZZLExzy() template <typename T = Vector<3>> Vector<3> xzy(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({x(),z(),y()}); return v;} SWIZZLExzz()
#define SWIZZLExzz() template <typename T = Vector<3>> Vector<3> xzz(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({x(),z(),z()}); return v;} SWIZZLEyxx()
#define SWIZZLEyxx() template <typename T = Vector<3>> Vector<3> yxx(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({y(),x(),x()}); return v;} SWIZZLEyxy()
#define SWIZZLEyxy() template <typename T = Vector<3>> Vector<3> yxy(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({y(),x(),y()}); return v;} SWIZZLEyxz()
#define SWIZZLEyxz() template <typename T = Vector<3>> Vector<3> yxz(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({y(),x(),z()}); return v;} SWIZZLEyyx()
#define SWIZZLEyyx() template <typename T = Vector<3>> Vector<3> yyx(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({y(),y(),x()}); return v;} SWIZZLEyyy()
#define SWIZZLEyyy() template <typename T = Vector<3>> Vector<3> yyy(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({y(),y(),y()}); return v;} SWIZZLEyyz()
#define SWIZZLEyyz() template <typename T = Vector<3>> Vector<3> yyz(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({y(),y(),z()}); return v;} SWIZZLEyzx()
#define SWIZZLEyzx() template <typename T = Vector<3>> Vector<3> yzx(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({y(),z(),x()}); return v;} SWIZZLEyzy()
#define SWIZZLEyzy() template <typename T = Vector<3>> Vector<3> yzy(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({y(),z(),y()}); return v;} SWIZZLEyzz()
#define SWIZZLEyzz() template <typename T = Vector<3>> Vector<3> yzz(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({y(),z(),z()}); return v;} SWIZZLEzxx()
#define SWIZZLEzxx() template <typename T = Vector<3>> Vector<3> zxx(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({z(),x(),x()}); return v;} SWIZZLEzxy()
#define SWIZZLEzxy() template <typename T = Vector<3>> Vector<3> zxy(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({z(),x(),y()}); return v;} SWIZZLEzxz()
#define SWIZZLEzxz() template <typename T = Vector<3>> Vector<3> zxz(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({z(),x(),z()}); return v;} SWIZZLEzyx()
#define SWIZZLEzyx() template <typename T = Vector<3>> Vector<3> zyx(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({z(),y(),x()}); return v;} SWIZZLEzyy()
#define SWIZZLEzyy() template <typename T = Vector<3>> Vector<3> zyy(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({z(),y(),y()}); return v;} SWIZZLEzyz()
#define SWIZZLEzyz() template <typename T = Vector<3>> Vector<3> zyz(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({z(),y(),z()}); return v;} SWIZZLEzzx()
#define SWIZZLEzzx() template <typename T = Vector<3>> Vector<3> zzx(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({z(),z(),x()}); return v;} SWIZZLEzzy()
#define SWIZZLEzzy() template <typename T = Vector<3>> Vector<3> zzy(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({z(),z(),y()}); return v;} SWIZZLEzzz()
#define SWIZZLEzzz() template <typename T = Vector<3>> Vector<3> zzz(typename std::enable_if<(N > 2), T>::type* = 0) { Vector<3> v({z(),z(),z()}); return v;} SWIZZLExx()
#define SWIZZLExx() template <typename T = Vector<2>> Vector<2> xx(typename std::enable_if<(N > 1), T>::type* = 0) { Vector<2> v({x(),x()}); return v;} SWIZZLExy()
#define SWIZZLExy() template <typename T = Vector<2>> Vector<2> xy(typename std::enable_if<(N > 1), T>::type* = 0) { Vector<2> v({x(),y()}); return v;} SWIZZLEyx()
#define SWIZZLEyx() template <typename T = Vector<2>> Vector<2> yx(typename std::enable_if<(N > 1), T>::type* = 0) { Vector<2> v({y(),x()}); return v;} SWIZZLEyy()
#define SWIZZLEyy() template <typename T = Vector<2>> Vector<2> yy(typename std::enable_if<(N > 1), T>::type* = 0) { Vector<2> v({y(),y()}); return v;} 
#define SWIZZLE() SWIZZLExyzw()

    template <typename... List>
    struct are_same;
    
    template <typename X, typename Y, typename...XS>
    struct are_same<X, Y, XS...>: std::false_type {};
    
    template <typename X, typename...XS>
    struct are_same<X, X, XS...>: are_same<X,XS...> {};
    
    template <typename X>
    struct are_same<X, X>: std::true_type {};
    
}}

#endif /* utils_h */
